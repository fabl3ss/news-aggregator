
// Code generated by MockGen. DO NOT EDIT.
// Source: parser-golang/pkg/domain/parse.go

// Package mock_domain is a generated GoMock package.
package mock_domain

import (
	domain "parser-golang/pkg/domain"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockParserUsecase is a mock of ParserUsecase interface.
type MockParserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockParserUsecaseMockRecorder
}

// MockParserUsecaseMockRecorder is the mock recorder for MockParserUsecase.
type MockParserUsecaseMockRecorder struct {
	mock *MockParserUsecase
}

// NewMockParserUsecase creates a new mock instance.
func NewMockParserUsecase(ctrl *gomock.Controller) *MockParserUsecase {
	mock := &MockParserUsecase{ctrl: ctrl}
	mock.recorder = &MockParserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParserUsecase) EXPECT() *MockParserUsecaseMockRecorder {
	return m.recorder
}

// ParseNews mocks base method.
func (m *MockParserUsecase) ParseNews(request *domain.RequestParameters) (*domain.ParserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseNews", request)
	ret0, _ := ret[0].(*domain.ParserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseNews indicates an expected call of ParseNews.
func (mr *MockParserUsecaseMockRecorder) ParseNews(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseNews", reflect.TypeOf((*MockParserUsecase)(nil).ParseNews), request)
}